plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.sonarqube" version "4.4.1.3373"
}

repositories {
    mavenCentral()
}

subprojects {
    group = 'com.sixheroes'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = '17'
    }

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                        "**/Q*",
                        "**/request/*", // request 폴더 제외
                        "**/response/*",
                        "**/dto/*",
                        "**/config/*",
                        "**/global/**",
                        "**/*Converter*",
                        "**/healthcheck/*"
                ])
            }))
        }
    }

    sonar {
        properties {
            property 'sonar.coverage.jacoco.xmlReportPaths', "build/reports/jacoco/jacocoTestReport.xml"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }


    ext {
        set('springCloudVersion', "2022.0.3")
    }

    // springCloudVersion global setting
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    tasks.register("prepareKotlinBuildScriptModel") {}
}

sonar {
    properties {
        property "sonar.projectKey", "prgrms-web-devcourse_Team-6Heroes-OneDayHero-BE"
        property "sonar.organization", "prgrms-web-devcourse"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.exclusions', '''
            **/Q*, **/request/*, **/response/*, **/dto/*, **/config/*, **/global/**, **/*Converter*, **/healthcheck/* 
        '''
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar.enabled = false

tasks.named('test') {
    useJUnitPlatform()
}
